<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
<title>SpaceTunes - Galactic Music Streaming</title>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet" />
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
<style>
  /* Reset and base */
  * {
    box-sizing: border-box;
  }
  body {
    margin: 0;
    font-family: 'Poppins', sans-serif;
    background: radial-gradient(ellipse at center, #0e0f2f 0%, #000010 70%), url('https://media.istockphoto.com/id/1440976287/photo/view-to-the-starry-galaxy.jpg?s=2048x2048&w=is&k=20&c=bdy-_kJFiZ9-T8gQpozhsxLu5t9VC_t1-MLingBnmXA=') center center no-repeat fixed;
    background-size: cover;
    color: #e0e0ff;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  a {
    color: inherit;
    text-decoration: none;
  }
  ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  button {
    font-family: 'Poppins', sans-serif;
  }
  input, button {
    -webkit-tap-highlight-color: transparent;
  }

  /* CONTAINER & GRID */
  .app-container {
    display: grid;
    grid-template-columns: 0 auto 1fr;
    grid-template-rows: auto 1fr auto;
    grid-template-areas:
      "header header header"
      "sidebar main player"
      "sidebar main player";
    height: 100vh;
    max-width: 1440px;
    margin: 0 auto;
    background: transparent;
  }

  /* HEADER */
  header {
    grid-area: header;
    background: rgba(5,8,27,0.85);
    backdrop-filter: saturate(180%) blur(20px);
    border-bottom: 1px solid rgba(255 255 255 / 0.08);
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 24px;
    height: 60px;
    position: sticky;
    top: 0;
    z-index: 50;
  }

  .logo {
    font-weight: 700;
    font-size: 1.75rem;
    background: linear-gradient(120deg, #7f53ac, #647dee);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    user-select: none;
    letter-spacing: 0.04em;
  }

  .search-container {
    flex: 1;
    max-width: 480px;
    margin: 0 20px;
    position: relative;
    display: flex;
    align-items: center;
  }
  .search-container input {
    width: 100%;
    padding: 10px 48px 10px 16px;
    border-radius: 14px;
    border: none;
    outline: none;
    font-size: 0.95rem;
    font-weight: 400;
    background: rgba(255 255 255 / 0.08);
    color: #e0e0ff;
    box-shadow: inset 0 0 6px rgb(255 255 255 / 0.02);
    transition: background-color 0.3s ease;
  }
  .search-container input::placeholder {
    color: #bbbde4;
  }
  .search-container input:focus {
    background: rgba(255 255 255 / 0.12);
    box-shadow: inset 0 0 10px #7678f7aa;
  }
  .search-icon {
    position: absolute;
    right: 14px;
    cursor: pointer;
    color: #9999bbcc;
    font-size: 24px;
    user-select: none;
    transition: color 0.3s ease;
  }
  .search-container input:focus + .search-icon {
    color: #858cff;
  }

  /* Hamburger menu button  */
  .hamburger-btn {
    display: none;
    cursor: pointer;
    background: none;
    border: none;
    font-size: 32px;
    color: #aabbff;
    transition: color 0.25s ease;
  }
  .hamburger-btn:focus-visible {
    outline: 3px solid #8a7aff;
    outline-offset: 2px;
  }
  .hamburger-btn:hover {
    color: #d0d6ff;
  }

  /* User container for Google profile */
  .user-container {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #a5aaffcc;
    font-weight: 600;
    font-size: 0.9rem;
  }
  .user-pic {
    width: 36px;
    height: 36px;
    border-radius: 9999px;
    border: 2px solid #7678f7ee;
  }

  /* SIDEBAR */
  aside.sidebar {
    grid-area: sidebar;
    background: rgba(10,12,30,0.88);
    backdrop-filter: saturate(180%) blur(24px);
    border-right: 1px solid rgba(255 255 255 / 0.07);
    display: flex;
    flex-direction: column;
    padding: 24px 16px 0 16px;
    max-width: 280px;
    min-width: 220px;
  }

  .sidebar-scroll {
    overflow-y: auto;
    padding-bottom: 140px; /* leave room for player on desktop */
  }

  .nav-links {
    margin-bottom: 32px;
  }
  .nav-links a {
    display: flex;
    align-items: center;
    font-weight: 600;
    color: #a3a8ffdd;
    font-size: 1rem;
    padding: 12px 16px;
    border-radius: 12px;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  .nav-links a:hover,
  .nav-links a:focus-visible {
    background-color: #5557e6aa;
    color: #dde1ff;
    outline: none;
  }
  .nav-links a.material-icons {
    margin-right: 12px;
    font-size: 22px;
  }
  .nav-links a.active {
    background-color: #7678f7ee;
    color: #fff;
    font-weight: 700;
  }

  /* Playlist Section */
  .playlists {
    margin-top: auto;
    border-top: 1px solid rgba(255 255 255 / 0.05);
    padding-top: 16px;
  }
  .playlists h3 {
    font-weight: 700;
    font-size: 1.1rem;
    margin-bottom: 14px;
    color: #9999ffcc;
    user-select: none;
    padding-left: 16px;
  }
  .playlists-list {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  .playlist-item {
    padding: 8px 16px;
    border-radius: 9999px;
    font-weight: 500;
    font-size: 0.9rem;
    color: #ced3ffcc;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  .playlist-item:hover,
  .playlist-item:focus-visible {
    background-color: #706ce666;
    outline: none;
  }
  .playlist-item.active {
    background-color: #9a8effdd;
    color: #fff;
    font-weight: 700;
  }

  /* MAIN CONTENT */
  main.main-content {
    grid-area: main;
    overflow-y: auto;
    padding: 24px 32px;
    display: flex;
    flex-direction: column;
  }

  /* Section Titles */
  section h2.section-title {
    font-weight: 700;
    font-size: 1.75rem;
    margin-bottom: 24px;
    user-select: none;
  }

  /* Cards grid for featured */
  .cards-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill,minmax(180px,1fr));
    gap: 24px;
  }

  /* Card styling */
  .card {
    background: rgba(18, 18, 52, 0.6);
    border-radius: 18px;
    padding: 12px;
    backdrop-filter: saturate(150%) blur(15px);
    box-shadow: 0 12px 20px rgb(71 52 146 / 0.5);
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    user-select: none;
  }
  .card:hover,
  .card:focus-visible {
    transform: translateY(-8px);
    box-shadow: 0 22px 34px rgb(138 110 255 / 0.8);
    outline: none;
  }
  .card img {
    border-radius: 14px;
    width: 100%;
    height: 180px;
    object-fit: cover;
    margin-bottom: 14px;
    background-color: #222244;
  }
  .card .card-title {
    font-weight: 600;
    font-size: 1rem;
    color: #dadfff;
    margin-bottom: 6px;
    line-height: 1.2;
  }
  .card .card-subtitle {
    font-size: 0.89rem;
    font-weight: 400;
    color: #a7aaffcc;
    user-select: none;
  }

  /* PLAYER */
  footer.player {
    grid-area: player;
    background: rgba(4, 6, 25, 0.95);
    border-top: 1px solid rgba(138, 110, 255, 0.15);
    padding: 12px 24px;
    backdrop-filter: saturate(180%) blur(20px);
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 12px;
    min-height: 80px;
    position: sticky;
    bottom: 0;
    z-index: 60;
  }

  .player-left, .player-center, .player-right {
    display: flex;
    align-items: center;
  }

  .player-left {
    gap: 12px;
    min-width: 180px;
  }
  .now-playing-art {
    width: 56px;
    height: 56px;
    border-radius: 14px;
    object-fit: cover;
    box-shadow: 0 6px 10px rgba(138, 110, 255, 0.45);
  }
  .now-playing-info {
    display: flex;
    flex-direction: column;
    user-select: none;
  }
  .now-playing-title {
    font-weight: 700;
    font-size: 1rem;
    color: #fff;
    line-height: 1.2;
  }
  .now-playing-artist {
    font-size: 0.85rem;
    color: #9a8effcc;
  }

  /* PLAYER CENTER CONTROLS */
  .player-center {
    flex: 1;
    justify-content: center;
    gap: 20px;
    flex-wrap: nowrap;
  }
  .control-btn {
    background: none;
    border: none;
    color: #b4a9ffcc;
    font-size: 28px;
    cursor: pointer;
    transition: transform 0.25s ease, color 0.3s ease;
    border-radius: 50%;
    padding: 6px;
  }
  .control-btn:focus-visible {
    outline: 3px solid #8a7aff;
    outline-offset: 3px;
  }
  .control-btn:hover {
    color: #d6cafbff;
    transform: scale(1.15);
  }
  .control-btn.disabled {
    opacity: 0.3;
    cursor: default;
    pointer-events: none;
  }

  /* Play/Pause central button bigger */
  .play-pause-btn {
    font-size: 36px;
    background: linear-gradient(135deg, #8a7aff, #a78bfa);
    color: #302c5f;
    box-shadow: 0 0 15px #a78bfaaa;
    padding: 8px;
    border-radius: 50%;
  }
  .play-pause-btn:hover {
    box-shadow: 0 0 25px #b8a9ffcc;
    color: #221f4d;
  }

  /* PLAYER RIGHT */
  .player-right {
    gap: 14px;
  }
  .volume-slider {
    width: 100px;
  }
  input[type="range"] {
    -webkit-appearance: none;
    width: 100%;
    height: 5px;
    background: #8a79ff88;
    border-radius: 8px;
    outline: none;
    cursor: pointer;
  }
  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 18px;
    height: 18px;
    background: #b6a9ffcc;
    border-radius: 50%;
    cursor: pointer;
    transition: background-color 0.3s ease;
    box-shadow: 0 0 5px #8a7aff;
    border: none;
  }
  input[type="range"]:focus::-webkit-slider-thumb {
    background: #d0cbffcc;
    box-shadow: 0 0 8px #9a8aff;
  }
  input[type="range"]::-moz-range-thumb {
    width: 18px;
    height: 18px;
    background: #b6a9ffcc;
    border-radius: 50%;
    cursor: pointer;
    border: none;
    box-shadow: 0 0 5px #8a7aff;
    transition: background-color 0.3s ease;
  }
  input[type="range"]:focus::-moz-range-thumb {
    background: #d0cbffcc;
    box-shadow: 0 0 8px #9a8aff;
  }

  /* QUEUE BUTTON */
  .queue-btn {
    position: relative;
  }
  .queue-count {
    position: absolute;
    top: -6px;
    right: -6px;
    background: #a78bfa;
    border-radius: 9999px;
    padding: 2px 6px;
    font-size: 0.75rem;
    font-weight: 700;
    color: #211e46;
    user-select: none;
    box-shadow: 0 0 8px #b1abffaa;
  }

  /* MUSIC SECTIONS */
  .section-group {
    margin-bottom: 48px;
  }

  /* PROGRESS BAR */
  .progress-container {
    position: relative;
    width: 240px;
    height: 6px;
    border-radius: 100px;
    background: rgba(255 255 255 / 0.10);
    cursor: pointer;
    margin: 0 16px;
    user-select: none;
  }
  .progress-bar {
    position: absolute;
    top: 0; left: 0; bottom: 0;
    background: linear-gradient(135deg, #a187ff, #6756ff);
    border-radius: 100px;
    width: 0%;
    transition: width 0.1s linear;
  }
  .progress-time {
    font-size: 0.75rem;
    color: #aaaaffcc;
    min-width: 40px;
    user-select: none;
  }

  /* RESPONSIVE */

  /* Mobile first */
  .sidebar {
    position: fixed;
    left: 0;
    top: 60px;
    bottom: 0;
    background: rgba(10,12,30,0.95);
    width: 220px;
    transform: translateX(-260px);
    transition: transform 0.25s ease;
    box-shadow: 6px 0 20px rgb(138 110 255 / 0.35);
    z-index: 40;
    padding-top: 24px;
  }
  .sidebar.show {
    transform: translateX(0);
  }

  /* overlay */
  .sidebar-overlay {
    position: fixed;
    inset: 0;
    background: rgba(10, 12, 30, 0.75);
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.25s ease;
    z-index: 39;
  }
  .sidebar-overlay.show {
    opacity: 1;
    pointer-events: auto;
  }

  main.main-content {
    padding-left: 16px;
    padding-right: 16px;
    padding-top: 16px;
    margin-top: 60px;
  }

  /* Hide desktop sidebar and player for small devices */
  @media (max-width: 767px) {
    .app-container {
      grid-template-columns: 1fr;
      grid-template-rows: auto 1fr auto;
      grid-template-areas:
        "header"
        "main"
        "player";
    }
    aside.sidebar {
      position: fixed;
      z-index: 40;
      height: calc(100vh - 60px);
      box-shadow: 6px 0 20px #6e64ff99;
    }
    main.main-content {
      margin-top: 0;
      padding: 16px 8px 8px 8px;
      max-width: 100vw;
      overflow-y: auto;
    }
    footer.player {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      padding: 12px 16px;
    }
    .hamburger-btn {
      display: inline-flex;
    }
  }

  /* Tablet */
  @media(min-width: 768px) and (max-width: 1023px){
    .sidebar {
      position: relative;
      transform: translateX(0);
      width: 240px;
      max-width: 240px;
      box-shadow: none;
      height: auto;
      padding-top: 0;
      border-right: 1px solid rgba(255 255 255 / 0.08);
      z-index: auto;
    }

    .sidebar-overlay {
      display: none;
    }

    main.main-content {
      margin-top: 0;
      padding-left: 24px;
      padding-right: 24px;
      padding-top: 32px;
      max-width: calc(100% - 240px);
    }
    footer.player {
      position: fixed;
      bottom: 0;
      left: 240px;
      right: 0;
      padding: 12px 32px;
      max-width: calc(100% - 240px);
    }
    .hamburger-btn {
      display: none;
    }
  }

  /* Desktop */
  @media(min-width: 1024px){
    .sidebar {
      position: relative;
      transform: none !important;
      width: 280px;
      max-width: 280px;
      height: auto;
      padding-top: 0;
      border-right: 1px solid rgba(255 255 255 / 0.08);
      box-shadow: none;
    }
    main.main-content {
      margin-top: 0;
      padding-left: 48px;
      padding-right: 48px;
      padding-top: 48px;
      max-width: calc(100% - 280px);
    }
    footer.player {
      position: sticky;
      bottom: 0;
      left: 280px;
      right: 0;
      padding: 16px 48px;
      max-width: calc(100% - 280px);
    }
  }
  /* Large desktop spacing */
  @media (min-width: 1440px) {
    .app-container {
      max-width: 1440px;
    }
    main.main-content {
      padding-left: 64px;
      padding-right: 64px;
    }
    footer.player {
      padding-left: 64px;
      padding-right: 64px;
    }
  }

  /* Google / Spotify login button styles */

  .login-buttons {
    display: flex;
    gap: 10px;
    align-items: center;
  }
  .login-btn {
    cursor: pointer;
    background: #8a7affcc;
    color: #221f4d;
    font-weight: 700;
    padding: 6px 14px;
    border-radius: 10px;
    font-size: 0.9rem;
    border: none;
    box-shadow: 0 0 10px #ac92ffcc;
    transition: background 0.3s ease;
    user-select: none;
    display: flex;
    align-items: center;
    gap: 6px;
  }
  .login-btn:hover {
    background: #a18bffa3;
  }
  .login-btn svg {
    width: 20px;
    height: 20px;
  }
  .user-name {
    color: #bbbfff;
    font-weight: 600;
    font-size: 0.9rem;
    user-select: none;
    white-space: nowrap;
    max-width: 120px;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>
<script src="https://accounts.google.com/gsi/client" async defer></script>
</head>
<body>
  <div class="app-container" role="main">

    <header role="banner" aria-label="Site header">
      <button aria-label="Open navigation menu" class="hamburger-btn material-icons" id="hamburgerBtn" aria-expanded="false" aria-controls="sidebar">menu</button>
      <div class="logo" aria-label="SpaceTunes logo">SpaceTunes</div>
      <div class="search-container">
        <input type="search" id="searchInput" placeholder="Search music, artists, albums..." aria-label="Search music" autocomplete="off"/>
        <span class="material-icons search-icon" aria-hidden="true">search</span>
      </div>
      <div id="loginSection" class="login-buttons" aria-live="polite" aria-atomic="true">
        <!-- Google login button or user info will appear here -->
      </div>
    </header>

    <aside class="sidebar" id="sidebar" role="navigation" aria-label="Primary navigation">
      <div class="sidebar-scroll" tabindex="0">
        <nav class="nav-links" aria-label="Primary menu">
          <a href="#" class="active" tabindex="0" aria-current="page"><span class="material-icons" aria-hidden="true">home</span> Home</a>
          <a href="#" tabindex="0"><span class="material-icons" aria-hidden="true">explore</span> Browse</a>
          <a href="#" tabindex="0"><span class="material-icons" aria-hidden="true">radio</span> Radio</a>
          <a href="#" tabindex="0"><span class="material-icons" aria-hidden="true">library_music</span> Your Library</a>
        </nav>

        <section class="playlists" aria-label="User playlists">
          <h3>Playlists</h3>
          <div class="playlists-list" id="playlistsList" role="list">
            <!-- JS will populate playlists -->
          </div>
        </section>
      </div>
    </aside>

    <main class="main-content" tabindex="0">
      <section class="section-group" aria-label="Featured Playlists">
        <h2 class="section-title">Featured Playlists</h2>
        <div class="cards-grid" id="featuredPlaylists">
          <!-- JS will populate cards -->
        </div>
      </section>

      <section class="section-group" aria-label="New Releases">
        <h2 class="section-title">New Releases</h2>
        <div class="cards-grid" id="newReleases">
          <!-- JS will populate cards -->
        </div>
      </section>

      <section class="section-group" aria-label="Trending Tracks">
        <h2 class="section-title">Trending Tracks</h2>
        <div class="cards-grid" id="trendingTracks">
          <!-- JS will populate cards -->
        </div>
      </section>
    </main>

    <div class="sidebar-overlay" id="sidebarOverlay" tabindex="-1" aria-hidden="true"></div>

    <footer class="player" role="contentinfo" aria-label="Music player controls">
      <div class="player-left">
        <img src="https://placehold.co/56x56/png?text=.." alt="Album art placeholder" class="now-playing-art" id="nowPlayingArt" />
        <div class="now-playing-info">
          <div class="now-playing-title" id="nowPlayingTitle">Welcome to SpaceTunes</div>
          <div class="now-playing-artist" id="nowPlayingArtist">Select a track to play</div>
        </div>
      </div>
      <div class="player-center" style="flex-wrap: nowrap; align-items: center;">
        <button class="control-btn" id="btnShuffle" aria-label="Toggle shuffle" title="Shuffle"><span class="material-icons">shuffle</span></button>
        <button class="control-btn" id="btnPrev" aria-label="Previous track" title="Previous"><span class="material-icons">skip_previous</span></button>
        <button class="control-btn play-pause-btn" id="btnPlayPause" aria-label="Play" title="Play"><span class="material-icons" id="playPauseIcon">play_arrow</span></button>
        <button class="control-btn" id="btnNext" aria-label="Next track" title="Next"><span class="material-icons">skip_next</span></button>

        <div class="progress-container" id="progressContainer" aria-label="Audio progress bar" role="slider" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0" tabindex="0">
          <div class="progress-bar" id="progressBar"></div>
        </div>

        <div class="progress-time" id="currentTime" aria-live="off" aria-atomic="true">0:00</div>
        <div class="progress-time" id="durationTime" aria-live="off" aria-atomic="true">0:00</div>
      </div>
      <div class="player-right">
        <button class="control-btn" aria-label="Mute" id="btnMute"><span class="material-icons" id="mutedIcon">volume_up</span></button>
        <input type="range" min="0" max="1" step="0.01" value="0.7" aria-label="Volume control" class="volume-slider" id="volumeSlider" />
        <button class="control-btn queue-btn" aria-label="View queue">
          <span class="material-icons">queue_music</span>
          <span class="queue-count" id="queueCount" aria-live="polite" aria-atomic="true" aria-relevant="all">0</span>
        </button>
      </div>
    </footer>
  </div>

<script>
  // === CONFIGURATION: Replace with your own IDs ===
  const GOOGLE_CLIENT_ID = 'YOUR_GOOGLE_CLIENT_ID_HERE';
  const SPOTIFY_CLIENT_ID = 'YOUR_SPOTIFY_CLIENT_ID_HERE';
  const SPOTIFY_REDIRECT_URI = window.location.origin + window.location.pathname; // Current URL (must be whitelisted on Spotify dev console)
  const SPOTIFY_SCOPES = [
    'user-read-private',
    'user-read-email',
    'playlist-read-private',
    'user-read-playback-state',
    'user-modify-playback-state',
    'streaming',
    'user-read-currently-playing',
  ].join(' ');
  const SPOTIFY_API_BASE_URL = 'https://api.spotify.com/v1';

  // === APPLICATION STATE ===
  let currentTrackIndex = null;
  let currentPlaylist = [];
  let shuffleEnabled = false;
  let repeatEnabled = false;
  let isPlaying = false;
  let googleUser = null;  // stores google profile info
  let spotifyAccessToken = null;
  let spotifyTokenExpiry = null;
  let spotifyUserId = null;

  const audio = new Audio();
  audio.crossOrigin = 'anonymous';

  // DOM refs
  const loginSection = document.getElementById('loginSection');
  const playlistsList = document.getElementById('playlistsList');
  const featuredPlaylistsContainer = document.getElementById('featuredPlaylists');
  const newReleasesContainer = document.getElementById('newReleases');
  const trendingTracksContainer = document.getElementById('trendingTracks');

  const nowPlayingArt = document.getElementById('nowPlayingArt');
  const nowPlayingTitle = document.getElementById('nowPlayingTitle');
  const nowPlayingArtist = document.getElementById('nowPlayingArtist');

  const btnPlayPause = document.getElementById('btnPlayPause');
  const playPauseIcon = document.getElementById('playPauseIcon');
  const btnNext = document.getElementById('btnNext');
  const btnPrev = document.getElementById('btnPrev');
  const btnShuffle = document.getElementById('btnShuffle');
  const btnRepeat = document.getElementById('btnRepeat');
  const btnMute = document.getElementById('btnMute');
  const mutedIcon = document.getElementById('mutedIcon');
  const volumeSlider = document.getElementById('volumeSlider');
  const queueCount = document.getElementById('queueCount');

  const hamburgerBtn = document.getElementById('hamburgerBtn');
  const sidebar = document.getElementById('sidebar');
  const sidebarOverlay = document.getElementById('sidebarOverlay');

  const progressContainer = document.getElementById('progressContainer');
  const progressBar = document.getElementById('progressBar');
  const currentTimeElem = document.getElementById('currentTime');
  const durationTimeElem = document.getElementById('durationTime');
  const searchInput = document.getElementById('searchInput');

  // === UTILS ===
  function formatTime(sec) {
    if(isNaN(sec)) return '0:00';
    const m = Math.floor(sec / 60);
    const s = Math.floor(sec % 60);
    return m + ':' + (s < 10 ? '0' : '') + s;
  }

  // === GOOGLE LOGIN INTEGRATION ===
  function handleGoogleCredentialResponse(response) {
    // Decode response.credential JWT to get profile info
    const {credential} = response;
    const base64Url = credential.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
    googleUser = JSON.parse(jsonPayload);
    renderGoogleUserUI();
  }
  function renderGoogleUserUI() {
    loginSection.innerHTML = '';
    if(googleUser) {
      // Show user pic, name and logout button
      const userDiv = document.createElement('div');
      userDiv.className = 'user-container';
      const img = document.createElement('img');
      img.src = googleUser.picture;
      img.alt = 'User profile picture';
      img.className = 'user-pic';
      userDiv.appendChild(img);
      const nameSpan = document.createElement('span');
      nameSpan.className = 'user-name';
      nameSpan.textContent = googleUser.name || googleUser.email;
      userDiv.appendChild(nameSpan);
      const logoutBtn = document.createElement('button');
      logoutBtn.className = 'login-btn';
      logoutBtn.textContent = 'Logout Google';
      logoutBtn.addEventListener('click', () => {
        googleUser = null;
        renderGoogleLoginButton();
      });
      loginSection.appendChild(userDiv);
      loginSection.appendChild(logoutBtn);
    } else {
      renderGoogleLoginButton();
    }
  }
  function renderGoogleLoginButton() {
    loginSection.innerHTML = '';
    /* Google Login Button will be rendered automatically by Google's SDK in #loginSection */
    google.accounts.id.initialize({
      client_id: GOOGLE_CLIENT_ID,
      callback: handleGoogleCredentialResponse,
      ux_mode: 'popup',
    });
    google.accounts.id.renderButton(
      loginSection,
      {
        theme: "outline",
        size: "small",
        type: "icon",
        text: "signin_with",
        shape: "circle",
        locale: "en",
      }
    );
    google.accounts.id.prompt(); // Show One Tap if possible
  }

  // === SPOTIFY API INTEGRATION ===

  // Parse URL hash parameters for spotify token after implicit grant redirect
  function getHashParams() {
    const hash = window.location.hash.substring(1);
    const params = {};
    hash.split('&').forEach(kv => {
      const [key,val] = kv.split('=');
      if(key && val) params[key] = decodeURIComponent(val);
    });
    return params;
  }

  async function fetchSpotifyUserProfile() {
    const res = await fetch(`${SPOTIFY_API_BASE_URL}/me`, {
      headers: {
        'Authorization': 'Bearer ' + spotifyAccessToken
      }
    });
    if(!res.ok) throw new Error('Failed to fetch Spotify profile');
    return await res.json();
  }

  async function fetchSpotifyUserPlaylists() {
    const res = await fetch(`${SPOTIFY_API_BASE_URL}/me/playlists`, {
      headers: {
        'Authorization': 'Bearer ' + spotifyAccessToken
      }
    });
    if(!res.ok) throw new Error('Failed to fetch Spotify playlists');
    return await res.json();
  }

  async function fetchSpotifyPlaylistTracks(playlistId) {
    let tracks = [];
    let url = `${SPOTIFY_API_BASE_URL}/playlists/${playlistId}/tracks?limit=50`;
    while(url) {
      const res = await fetch(url, {headers: {'Authorization': 'Bearer ' + spotifyAccessToken}});
      if(!res.ok) throw new Error('Failed to fetch playlist tracks');
      const data = await res.json();
      tracks = tracks.concat(data.items);
      url = data.next;
    }
    return tracks;
  }

  // Show 'Connect to Spotify' button if user not connected
  function renderSpotifyConnectButton() {
    // Only show if not connected
    if(spotifyAccessToken) return;
    const btn = document.createElement('button');
    btn.className = 'login-btn';
    btn.textContent = 'Connect Spotify';
    btn.setAttribute('aria-label', 'Connect your Spotify account');
    btn.addEventListener('click', () => {
      const authUrl = `https://accounts.spotify.com/authorize?client_id=${encodeURIComponent(SPOTIFY_CLIENT_ID)}&response_type=token&redirect_uri=${encodeURIComponent(SPOTIFY_REDIRECT_URI)}&scope=${encodeURIComponent(SPOTIFY_SCOPES)}&show_dialog=true`;
      window.location.href = authUrl;
    });
    loginSection.appendChild(btn);
  }

  // Clear Spotify auth token data (for logout or error)
  function clearSpotifyAuth() {
    spotifyAccessToken = null;
    spotifyTokenExpiry = null;
    spotifyUserId = null;
    // Also clear current playlist and reset UI
    currentPlaylist = [];
    currentTrackIndex = null;
    renderDemoData();
    renderSpotifyConnectButton();
  }

  // Load Spotify playlists and display in sidebar and main content
  async function loadSpotifyPlaylistsAndTracks() {
    if(!spotifyAccessToken) return;
    try {
      const profile = await fetchSpotifyUserProfile();
      spotifyUserId = profile.id;
      const playlistsData = await fetchSpotifyUserPlaylists();
      // Clear and show user's playlists in sidebar
      playlistsList.innerHTML = '';
      playlistsData.items.forEach(pl => {
        const div = document.createElement('div');
        div.className = 'playlist-item';
        div.setAttribute('tabindex', '0');
        div.textContent = pl.name;
        div.dataset.id = pl.id;
        div.addEventListener('click', async () => {
          await loadSpotifyPlaylist(pl.id);
          setActivePlaylist(pl.id);
          if (window.innerWidth <= 767) {
            sidebar.classList.remove('show');
            sidebarOverlay.classList.remove('show');
            hamburgerBtn.setAttribute('aria-expanded', 'false');
            sidebarOverlay.setAttribute('aria-hidden', 'true');
          }
        });
        div.addEventListener('keydown', e => {
          if(e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            div.click();
          }
        });
        playlistsList.appendChild(div);
      });
      // Render user's playlists as featured playlists too
      featuredPlaylistsContainer.innerHTML = '';
      playlistsData.items.forEach(pl => {
        const card = document.createElement('div');
        card.className = 'card';
        card.setAttribute('tabindex', '0');
        card.setAttribute('role', 'button');
        card.setAttribute('aria-label', `Play Spotify playlist ${pl.name}`);
        const imageUrl = pl.images?.[0]?.url || 'https://placehold.co/300x300/png?text=No+Image';
        card.innerHTML = `
          <img src="${imageUrl}" alt="Spotify playlist cover: ${pl.name}" />
          <div class="card-title">${pl.name}</div>
          <div class="card-subtitle">Spotify Playlist</div>
        `;
        card.addEventListener('click', async () => {
          await loadSpotifyPlaylist(pl.id);
          setActivePlaylist(pl.id);
        });
        card.addEventListener('keydown', e => {
          if(e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            card.click();
          }
        });
        featuredPlaylistsContainer.appendChild(card);
      });

      // Clear new releases and trending to avoid confusion
      newReleasesContainer.innerHTML = '';
      trendingTracksContainer.innerHTML = '';

    } catch(err) {
      console.error('Spotify load error:', err);
      clearSpotifyAuth();
    }
  }

  // Load a specific Spotify playlist's tracks as current playlist
  async function loadSpotifyPlaylist(playlistId) {
    try {
      const trackItems = await fetchSpotifyPlaylistTracks(playlistId);
      // Map Spotify tracks to our internal track objects for player
      currentPlaylist = trackItems
        .filter(item => item.track && item.track.preview_url) // Filter tracks with preview url
        .map(item => ({
          id: item.track.id,
          title: item.track.name,
          artist: item.track.artists.map(a => a.name).join(', '),
          image: item.track.album.images?.[0]?.url || 'https://placehold.co/300x300/png?text=No+Image',
          audio: item.track.preview_url, // Use preview_url for demo playback, must be https
        }));
      if(currentPlaylist.length === 0) {
        alert('No playable tracks with preview in this playlist.');
        return;
      }
      currentTrackIndex = 0;
      loadTrack(currentPlaylist[currentTrackIndex], true);
      updateQueueCount();
    } catch(err) {
      console.error('Error loading Spotify playlist tracks:', err);
      alert('Failed to load playlist tracks.');
    }
  }

  // Load a single track (played from either demo or Spotify playlist)
  function loadTrack(track, playImmediately) {
    if(!track || !track.audio) return;
    audio.src = track.audio;
    audio.load();
    nowPlayingArt.src = track.image;
    nowPlayingArt.alt = `Album art of ${track.title} by ${track.artist}`;
    nowPlayingTitle.textContent = track.title;
    nowPlayingArtist.textContent = track.artist;

    currentTrackIndex = currentPlaylist.findIndex(t => t.id === track.id);
    if(currentTrackIndex === -1) currentTrackIndex = 0;

    updateQueueCount();
    updateDurationTime(0);

    if(playImmediately) playAudio();
    else pauseAudio();
  }

  // Renders default demo data if Spotify not connected
  function renderDemoData() {
    // Demo data from earlier – sample playlists and tracks
    renderPlaylists();
    renderFeaturedPlaylists();
    renderNewReleases();
    renderTrendingTracks();
  }

  // ==== PLAYER CONTROLS ====
  function playAudio() {
    audio.play().then(() => {
      isPlaying = true;
      updatePlayPauseButton();
    }).catch(() => {});
  }
  function pauseAudio() {
    audio.pause();
    isPlaying = false;
    updatePlayPauseButton();
  }
  function updatePlayPauseButton() {
    if(isPlaying) {
      playPauseIcon.textContent = 'pause';
      btnPlayPause.setAttribute('aria-label', 'Pause');
      btnPlayPause.title = 'Pause';
    } else {
      playPauseIcon.textContent = 'play_arrow';
      btnPlayPause.setAttribute('aria-label', 'Play');
      btnPlayPause.title = 'Play';
    }
  }
  function togglePlayPause() {
    if(isPlaying) pauseAudio();
    else playAudio();
  }
  function playNextTrack() {
    if(shuffleEnabled) {
      currentTrackIndex = Math.floor(Math.random() * currentPlaylist.length);
    } else {
      currentTrackIndex++;
      if(currentTrackIndex >= currentPlaylist.length) {
        if(repeatEnabled) currentTrackIndex = 0;
        else {
          currentTrackIndex = currentPlaylist.length -1;
          pauseAudio();
          return;
        }
      }
    }
    loadTrack(currentPlaylist[currentTrackIndex], true);
  }
  function playPrevTrack() {
    if(shuffleEnabled) {
      currentTrackIndex = Math.floor(Math.random() * currentPlaylist.length);
    } else {
      currentTrackIndex--;
      if(currentTrackIndex < 0) {
        if(repeatEnabled) currentTrackIndex = currentPlaylist.length -1;
        else {
          currentTrackIndex = 0;
          pauseAudio();
          return;
        }
      }
    }
    loadTrack(currentPlaylist[currentTrackIndex], true);
  }

  // Toggle shuffle and repeat buttons visually
  btnShuffle.addEventListener('click', () => {
    shuffleEnabled = !shuffleEnabled;
    btnShuffle.style.color = shuffleEnabled ? '#a187ff' : '#b4a9ffcc';
  });
  btnRepeat.addEventListener('click', () => {
    repeatEnabled = !repeatEnabled;
    btnRepeat.style.color = repeatEnabled ? '#a187ff' : '#b4a9ffcc';
  });
  btnPlayPause.addEventListener('click', togglePlayPause);
  btnNext.addEventListener('click', playNextTrack);
  btnPrev.addEventListener('click', playPrevTrack);

  // Mute & volume controls
  btnMute.addEventListener('click', () => {
    if(audio.muted) {
      audio.muted = false;
      mutedIcon.textContent = 'volume_up';
      volumeSlider.value = audio.volume.toFixed(2);
    } else {
      audio.muted = true;
      mutedIcon.textContent = 'volume_off';
      volumeSlider.value = 0;
    }
  });
  volumeSlider.addEventListener('input', e => {
    const vol = e.target.value;
    audio.volume = vol;
    if(audio.muted && vol > 0) {
      audio.muted = false;
      mutedIcon.textContent = 'volume_up';
    } else if(vol == 0) {
      audio.muted = true;
      mutedIcon.textContent = 'volume_off';
    }
  });
  audio.volume = volumeSlider.value;

  // Auto play next on track end
  audio.addEventListener('ended', () => {
    if(repeatEnabled || currentTrackIndex < currentPlaylist.length -1) {
      playNextTrack();
    } else {
      pauseAudio();
    }
  });

  // Update progress bar and timings
  audio.addEventListener('timeupdate', updateProgress);
  audio.addEventListener('durationchange', () => {
    if(audio.duration) durationTimeElem.textContent = formatTime(audio.duration);
  });

  function updateProgress() {
    if(!audio.duration) return;
    const percent = (audio.currentTime / audio.duration) * 100;
    progressBar.style.width = percent + '%';
    currentTimeElem.textContent = formatTime(audio.currentTime);
    durationTimeElem.textContent = formatTime(audio.duration);
    progressContainer.setAttribute('aria-valuenow', Math.round(percent));
  }

  progressContainer.addEventListener('click', e => {
    const rect = progressContainer.getBoundingClientRect();
    const clickX = e.clientX - rect.left;
    const width = rect.width;
    const seekTime = (clickX / width) * audio.duration;
    audio.currentTime = seekTime;
  });
  progressContainer.addEventListener('keydown', e => {
    let seekChange = 0;
    if(e.key === 'ArrowRight' || e.key === 'ArrowUp') {
      seekChange = 5;
      e.preventDefault();
    } else if(e.key === 'ArrowLeft' || e.key === 'ArrowDown') {
      seekChange = -5;
      e.preventDefault();
    }
    if(seekChange !== 0) {
      let newTime = audio.currentTime + seekChange;
      if(newTime < 0) newTime = 0;
      if(newTime > audio.duration) newTime = audio.duration;
      audio.currentTime = newTime;
    }
  });

  // Search filter for demo playlists and tracks
  searchInput.addEventListener('input', () => {
    const term = searchInput.value.trim().toLowerCase();
    if(!term || !term.length) {
      if(!spotifyAccessToken) {
        renderFeaturedPlaylists();
        renderNewReleases();
        renderTrendingTracks();
      } else {
        loadSpotifyPlaylistsAndTracks();
      }
      return;
    }
    if(!spotifyAccessToken) {
      // filter demo data on playlists and tracks
      filterContent(term);
    }
    // If spotify connected, search will need more complex API calls, omitted here for brevity
  });

  function filterContent(term) {
    // Filter playlists by title or subtitle
    const filteredPlaylists = samplePlaylists.filter(pl => 
      pl.title.toLowerCase().includes(term) ||
      pl.subtitle.toLowerCase().includes(term));
    renderFeaturedPlaylists(filteredPlaylists);

    // Filter tracks by title or artist
    const allTracks = sampleNewReleases.concat(sampleTrendingTracks);
    const filteredTracks = allTracks.filter(track =>
      track.title.toLowerCase().includes(term) ||
      track.artist.toLowerCase().includes(term));

    // Split filtered tracks between new releases and trending by id presence
    const filteredNewReleases = filteredTracks.filter(t => sampleNewReleases.some(nr => nr.id === t.id));
    const filteredTrending = filteredTracks.filter(t => sampleTrendingTracks.some(tr => tr.id === t.id));

    renderNewReleases(filteredNewReleases);
    renderTrendingTracks(filteredTrending);
  }

  // Sidebar toggle mobile
  hamburgerBtn.addEventListener('click', () => {
    const expanded = hamburgerBtn.getAttribute('aria-expanded') === 'true';
    if (expanded) {
      sidebar.classList.remove('show');
      sidebarOverlay.classList.remove('show');
      hamburgerBtn.setAttribute('aria-expanded', 'false');
      sidebarOverlay.setAttribute('aria-hidden', 'true');
    } else {
      sidebar.classList.add('show');
      sidebarOverlay.classList.add('show');
      hamburgerBtn.setAttribute('aria-expanded', 'true');
      sidebarOverlay.setAttribute('aria-hidden', 'false');
    }
  });

  sidebarOverlay.addEventListener('click', () => {
    sidebar.classList.remove('show');
    sidebarOverlay.classList.remove('show');
    hamburgerBtn.setAttribute('aria-expanded', 'false');
    sidebarOverlay.setAttribute('aria-hidden', 'true');
  });

  // Keyboard shortcuts for player and sidebar close
  window.addEventListener('keydown', e => {
    if(e.key === 'Escape' && sidebar.classList.contains('show')) {
      sidebar.classList.remove('show');
      sidebarOverlay.classList.remove('show');
      hamburgerBtn.setAttribute('aria-expanded', 'false');
      sidebarOverlay.setAttribute('aria-hidden', 'true');
      hamburgerBtn.focus();
    }
    if(e.target.tagName !== 'INPUT') {
      if(e.key === ' ') {
        e.preventDefault();
        togglePlayPause();
      }
      if(e.key === 'ArrowRight') {
        e.preventDefault();
        playNextTrack();
      }
      if(e.key === 'ArrowLeft') {
        e.preventDefault();
        playPrevTrack();
      }
    }
  });

  function updateQueueCount() {
    queueCount.textContent = currentPlaylist.length;
  }

  // === Initialization ===

  // Parse Spotify token from URL hash and clear it for clean URLs
  function parseSpotifyToken() {
    const params = getHashParams();
    if(params.access_token) {
      spotifyAccessToken = params.access_token;
      if(params.expires_in) {
        spotifyTokenExpiry = Date.now() + parseInt(params.expires_in, 10) * 1000;
      }
      // Clear hash
      history.replaceState("", document.title, window.location.pathname + window.location.search);
      console.log('Spotify access token acquired');
      return true;
    }
    return false;
  }

  // On load initialize Google login and Spotify token status
  window.addEventListener('load', async () => {
    renderGoogleLoginButton();

    let hasSpotifyToken = parseSpotifyToken();
    if(hasSpotifyToken) {
      loginSection.innerHTML = '';
      // Show Spotify connect button as connected (could show disconnect here)
      // Load Spotify user playlists
      await loadSpotifyPlaylistsAndTracks();
    } else {
      renderSpotifyConnectButton();
      renderDemoData();
    }
  });
</script>
</body>
</html>

